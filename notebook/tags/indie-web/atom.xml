<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Indie Web | Aaron Gustafson]]></title>
  <link href="https://www.aaron-gustafson.com/notebook/tags/indie-web/atom.xml" rel="self"/>
  <link href="https://www.aaron-gustafson.com/"/>
  <updated>2016-12-13T12:24:08-05:00</updated>
  <id>https://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Crossposting to Medium From Jekyll]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/crossposting-to-medium-from-jekyll/"/>
    <updated>2015-10-26T15:27:00-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/crossposting-to-medium-from-jekyll</id>
    <content type="html"><![CDATA[<p>Last week, <a href="https://adactio.com/journal/9694">Jeremy Keith posted about syndicating his content to Medium using their new API</a>. Before they added <a href="https://github.com/Medium/medium-api-docs">the API</a>, there was no way to automatically publishing to <a href="https://medium.com">Medium</a> from your own blog. And doing it manually was quite tedious.</p>

<p>Jeremy posted in detail about how to set it all up and provided <a href="https://gist.github.com/adactio/c174a4a68498e30babfd">the PHP code he’s using</a> to make it all work. As I’m running a static site on <a href="http://octopress.org/">Octopress</a>, I ported it to Ruby as a <a href="http://jekyllrb.com/docs/plugins/#generators">Jekyll Generator</a>. I’ve <a href="https://github.com/aarongustafson/jekyll-crosspost_to_medium">posted it to Github</a>, so you can grab it there if you so desire.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Enabling Webmentions in Jekyll]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll/"/>
    <updated>2014-11-18T17:01:08-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/enabling-webmentions-in-jekyll</id>
    <content type="html"><![CDATA[<p>While I am really happy with my choice to move away from a dynamic website/blog to a static one—powered by <a href="http://octopress.org/">Octopress</a>, hosted for free on <a href="https://github.com">Github</a>—it’s been pretty limiting when it comes to integrating comments and other more necessarily dynamic components.</p>

<!-- more -->

<p>Like many folks in the Octopress/Jekyll community, I’ve opted to use <a href="https://disqus.com/websites/">Disqus’ free service to manage comments</a>, but I’m not in love with it. First of all, it requires JavaScript. You know <a href="/notebook/2014/a-fundamental-disconnect/">my stance on that</a>. Now I’m willing to accept comments as an <a href="https://en.wikipedia.org/wiki/Progressive_enhancement">enhancement</a> to the reading process, but it doesn’t mean I like the situation. Secondly, they control the content and if they go away, so do all of your comments.</p>

<p>I’ve become quite intrigued by the potential of <a href="http://indiewebcamp.com/webmention">webmentions</a> as a way of taking back control of our content. They are a brilliant way to loosely connect related posts on personal blogs and third-parties like Twitter, Facebook, and Google+. With my mind unable to think about anything else, I decided to see what it would take to get webmentions up and running here.</p>

<p>At first I went to <a href="http://aaronparecki.com/">Aaron Parecki</a>’s <a href="http://webmention.io">webmention.io</a> project and looked through <a href="https://github.com/aaronpk/webmention.io/blob/master/README.md">the docs</a>. It looked like it could fit the bill, but I noticed there was no way to directly apply for an account, so I moved on to <a href="http://voxpelli.com/">Pelle Wessman</a>’s <a href="https://webmention.herokuapp.com/">webmention Heroku app</a>.</p>

<p>I really like Pelle’s solution and easily implemented it locally, but the JavaScript reliance was nagging at me. I returned to webmention.io and decided to <a href="https://twitter.com/aarongustafson/status/534394789152948224">reach out to Aaron</a> on the off change he’d give me access to his service. <a href="https://twitter.com/aaronpk/status/534398408815964160">He responded pretty quickly</a> and I was off to the races.</p>

<p>In preparation for building my plugin, I looked over a few other Jekyll plugins (Octopress is built on Jekyll) and got a sense of the structure and how to go about creating a <a href="https://github.com/Shopify/liquid/wiki/Liquid-for-Programmers#create-your-own-tags">Liquid tag</a> (Liquid being the default templating language used by Jekyll). Then I created a new Ruby file and got cracking. Now I’ll warn you, I don’t normally write Ruby. The last time I did it professionally was when <a href="https://github.com/rails/rails/tree/v0.12.0">Rails was at 0.12</a>, so that should tell you something. That said, it was pretty easy to get back into the flow and I managed to put together <a href="https://github.com/aarongustafson/jekyll-webmention_io">a basic Liquid Tag for webmentions and webmention counts</a> in about two hours.</p>

<p>The tag to display webentions for a page is pretty simple:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist16353494" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-webmentions-html" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-webmentions-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-webmentions-html-LC1" class="blob-code blob-code-inner js-file-line">{% webmentions YOUR_URL %}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/cb15ead6bf3a72b8f92a/raw/8a8680ad65a57eeabd8dc93d6ff080c65c1594f2/webmentions.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/cb15ead6bf3a72b8f92a#file-webmentions-html">webmentions.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>This tag outputs a container <code>div</code> and an ordered list of every webmention found when the site is generated (or previewed). To show the current webmention count, you use a slightly different tag which just outputs a number:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist16353494" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-webmention_count-html" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-webmention_count-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-webmention_count-html-LC1" class="blob-code blob-code-inner js-file-line">{% webmention_count YOUR_URL %}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/cb15ead6bf3a72b8f92a/raw/8a8680ad65a57eeabd8dc93d6ff080c65c1594f2/webmention_count.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/cb15ead6bf3a72b8f92a#file-webmention_count-html">webmention_count.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>These two tags allows me to bypass the JavaScript used in webmention.io’s integration examples and have Ruby consult the API directly. The plugin then creates the necessary markup using the JSON data the API provided.</p>

<p>Unfortunately, Liquid tags are only processed by Jekyll when the site is compiled. The actual site exists only as static HTML files on Github’s servers, so any webmentions created after I generate the site won’t show up. That’s a little less than ideal.</p>

<p>I don’t regenerate the site that often, nor do I want to set up a cron to automatically do it in order to update the webmentions. I took the afternoon to mull over some options to address this challenge. <em>How do I add in missing webmentions dynamically when the site itself is static?</em></p>

<p>Then it dawned on me: JavaScript can fill in the gaps. Using the examples Aaron had put together, I cobbled together a script to update the webmention list and fill in any missing mentions. In the interest of reducing dependencies, I used <a href="http://vanilla-js.com">the infamous Vanilla.js library</a> to create and insert new webmentions when the page was loaded.</p>

<p>And, as an added bonus, I adapted another bit of Aaron’s code to make the webmention list update in real time as new mentions are created elsewhere on the Web. The code uses <a href="http://www.w3.org/TR/websockets/">WebSockets</a>, <a href="http://caniuse.com/#feat=websockets">if available</a>, to make the magic happen. It’s pretty nifty and I tip my hat to Aaron for implementing that feature in the webmention.io service.</p>

<p>It’s been a pretty fun mini-project. In the end, I created a useful bit of kit that provides three distinct experiences:</p>

<ol>
  <li>Static webmentions collected when the site was generated form the baseline experience;</li>
  <li>JavaScript-enabled browsers get any webmentions that were published since I last generated the site; and</li>
  <li>JavaScript-enabled browsers with WebSockets support get real-time updates with any webmentions that are published after the page loads.</li>
</ol>

<p>And, even better, the next time I generate the site, any missing webmentions will be inserted into the static files for safe keeping.</p>

<p>That’s a pretty nice continuum of experience if you ask me.</p>

<p>If you are a Jekyll or Octopress user, you can pick up <a href="https://github.com/aarongustafson/jekyll-webmention_io">the plugin and optional JavaScript file on Github</a>. Feel free to fork and sent me your bug fixes and enhancements.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[What Do We Own?]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/what-do-we-own/"/>
    <updated>2014-11-17T09:43:54-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/what-do-we-own</id>
    <content type="html"><![CDATA[<p>My good friend <a href="http://adactio.com">Jeremy</a> is <a href="https://adactio.com/journal/6801">incredibly excited</a> about the <a href="http://indiewebcamp.com/">Indie Web movement</a> and I am right there with him. I love the idea of owning your content and then syndicating it out to social networks, photo sites, and the like. It makes complete sense… <a href="http://www.gyford.com/phil/writing/2009/04/28/geocities.php">Web-based services have a habit of disappearing</a>, so we shouldn’t rely on them. The only Web that is permanent is the one we control.</p>

<!-- more -->

<p>But going down this rabbit hole got me wondering <em>how much do we really control?</em> And beyond that, <em>what do we own?</em></p>

<p>To borrow <a href="http://aworkinglibrary.com/writing/index-cards/">a quote from Mandy Brown</a> (which also Jeremy referenced):</p>

<blockquote>
  <p>No one owns this domain but me, and no one but me can take it down. I will not wake up one morning to discover that my service has been “sunsetted” and I have some days or weeks to export my data (if I have that at all). These URLs will never break.</p>
</blockquote>

<p>I don’t know if her statement is true. Idealistically, I want it to be true, but consider the following:</p>

<ol>
  <li><strong>We rent domain names through registrars.</strong> We “purchase” domain names, but we must renew them from time to time to remain in control. Assuming you keep up the payments, they can still be <a href="http://www.wired.com/2012/03/feds-seize-foreign-sites/">seized for any number of reasons</a> or <a href="https://en.wikipedia.org/wiki/Domain_hijacking">they can be stolen</a>. Or the <a href="https://en.wikipedia.org/wiki/RegisterFly">registrar can go out of business</a> and you have to scramble to move it to a new registrar.</li>
  <li><strong>Most of us rent space on the Web.</strong> I can’t think of a single friend of mine who still personally hosts his or her website. As such, we are beholden to our hosts. Even if we keep on top of our payments, things can go wrong: They could <a href="https://wordpress.org/support/topic/acenet-hosting-crashed-and-lost-all-my-data-what-do-i-do-now">crash or have another issue</a> and <a href="http://www.startupsmart.com.au/technology/crazy-domains-loses-web-hosting-data-as-startups-suffer/2014051912326.html">lose all of our data</a>. <a href="http://www.danrichard.com/2014/03/30/p2lhosting-is-now-closed-thank-you-everyone/">They could go under</a>. Or they could simply <a href="http://webdesignfromscratch.com/blog/how-123reg-almost-crippled-my-business/">lose your domain</a>.</li>
</ol>

<p>Knowing all of this—and realizing that when I am dead and gone all of the content I created could be lost to the ether if my family doesn’t know how to keep things going or doesn’t care to keep making these payments—I am left wondering <em>how do we achieve the permanence of print on the Web?</em></p>

<p>I don’t have any answers, so I pose it as an open question to the Indie Web community. If you have some thoughts, I encourage you to post them on your own site and use <a href="http://indiewebcamp.com/webmention">webmentions</a> to add them to this page. Or you can default to <a href="#disqus">the comments</a>.</p>
]]></content>
  </entry>
  
</feed>
