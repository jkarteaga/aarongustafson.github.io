<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Browsers | Aaron Gustafson]]></title>
  <link href="https://www.aaron-gustafson.com/notebook/tags/browsers/atom.xml" rel="self"/>
  <link href="https://www.aaron-gustafson.com/"/>
  <updated>2016-08-17T20:54:28-04:00</updated>
  <id>https://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[My Top Takeaways From the 2016 Edge Web Summit]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/my-top-takeaways-from-the-edge-web-summit-2016/"/>
    <updated>2016-04-06T15:18:15-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/my-top-takeaways-from-the-edge-web-summit-2016</id>
    <content type="html"><![CDATA[<p>Earlier this week, my colleagues on the Microsoft Edge team put on the second of what has now become an annual event: <a href="http://lanyrd.com/2016/edgesummit/">the Edge Web Summit</a>. The format was a little different this year, with team members from across the organization delivering quick, punchy 30-minute talks on topics ranging from standard implementations to the user experience of a browser to real-time communications. I live-tweeted quite a few of the talks, but I thought I’d provide a bit of a round-up of what was revealed, discussed, and more so you can read it all in one place.</p>

<!-- more -->

<ul>
  <li>Since launching Edge 8 months ago, the team has pushed 12 update releases, 128 new features, and 6,527 bug fixes!</li>
  <li>The team has launched a new, highly transparent bug tracker for Edge: <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/issues/">issues.microsoftedge.com</a>.</li>
  <li>The Edge team has done a ton of research into what specs are being used and how they are being used on the open Web. They are starting to share this information on <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/data/">data.microsoftedge.com</a>. It currently consists of 2 parts: 1) <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/usage/">usage data</a> from real sites that looks at not only CSS properties in use, but values too; and 2) <a href="https://developer.microsoft.com/en-us/microsoft-edge/platform/catalog/">a catalog of available APIs</a> and a detailed analysis of browser support, down to specific configuration and property values.</li>
  <li>Hot on the tails of <a href="https://developer.microsoft.com/en-us/microsoft-edge/tools/remote/">RemoteIE</a> opening up for Linux users, RemoteEdge is coming soon! Jacob Rossi showed <a href="https://twitter.com/aarongustafson/status/717022717652828163">a screenshot of an Edge instance running on Azure, within Chrome</a>. So cool!</li>
  <li><a href="https://dvcs.w3.org/hg/speech-api/raw-file/tip/speechapi.html#tts-section">Text-to-speech</a> directly from within JavaScript!</li>
  <li>The <a href="https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API">Fetch API</a>!</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Navigator/sendBeacon">Beacons</a> as an alternative to blocking JavaScript requests for telemetry data: <code>navigator.sendBeacon( uri, data )</code>.</li>
  <li><a href="https://developer.mozilla.org/en-US/docs/Web/API/Notifications_API">Web notifications</a>!</li>
  <li><a href="https://www.w3.org/TR/WOFF2/">WOFF 2</a> font support for better compression and faster downloads/decompression!</li>
  <li>The team is currently prototyping and investigating <a href="https://www.w3.org/TR/service-workers/">Service Workers</a>, <a href="https://developer.mozilla.org/en-US/docs/Web/API/Push_API">Push Notifications</a>, <a href="https://www.w3.org/TR/shadow-dom/">Shadow DOM</a>, <a href="https://www.w3.org/TR/custom-elements/">Custom Elements</a>, <a href="https://www.w3.org/Payments/">Web Payments</a>, <a href="https://www.w3.org/community/webassembly/">Web Assembly</a>, and <a href="https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Statements/import">ES Modules</a>.</li>
  <li>Cortana in Edge has gotten some major upgrades, such as being able to “Ask Cortana” about an image to get more information (like a recipe for the cookies you saw on Pinterest that did’t include a link).</li>
  <li>Microsoft open-sourced <a href="https://github.com/MicrosoftEdge/css-usage">the CSS crawler powering their data portal</a> so other browser vendors can run it too.</li>
  <li><a href="https://en.wikipedia.org/wiki/FIDO_Alliance">FIDO</a>-based login (like <a href="http://windows.microsoft.com/en-us/windows-10/getstarted-what-is-hello">Windows Hello</a>) is coming to the Web!</li>
  <li><a href="http://windows.microsoft.com/en-us/windows/hear-text-read-aloud-narrator">Microsoft’s Narrator</a> screen reader now supports a “Developer Mode” that blanks out the current app (such as your browser window) in order to enable you to more easily debug accessibility issues.</li>
  <li>The F12 tools in Edge now enable you to view the previously mysterious <a href="https://www.paciellogroup.com/blog/2015/01/the-browser-accessibility-tree/">Accessibility Tree</a> in addition to allowing you to drill more deeply into the various properties of an element that relate to its accessibility.</li>
</ul>

<p>I didn’t take a ton of notes in the second half of the day as I was prepping for <a href="https://channel9.msdn.com/Events/WebPlatformSummit/edgesummit2016/ES1612">my own session on accessibility</a>, but other highlights included building &amp; debugging <a href="https://blogs.windows.com/msedgedev/2016/03/17/preview-extensions/">extensions for Edge</a> (tldr; you can easily port Chrome extensions) and cool things you can do using <a href="https://www.microsoft.com/en-us/windows/Continuum">Continuum</a>.</p>

<p>Overall, the event was incredibly informative and has me really excited about the work the Edge team is doing and where the browser is going. The new stuff that‘s ready for prime time will be out for the public in <a href="https://blogs.windows.com/windowsexperience/2016/03/30/windows-10-anniversary-update-brings-new-experiences-and-developer-opportunity/">the Anniversary Update of Windows 10</a> this Summer, but some of it is has already landed in <a href="https://insider.windows.com/">Windows Insider</a> builds.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Ramblings on New Browser Features, Interop&shy;erability, Craft, and the Future of the Web]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/ramblings-on-new-browser-features-interoperability-craft-and-the-future-of-the-web/"/>
    <updated>2015-08-07T10:14:23-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/ramblings-on-new-browser-features-interoperability-craft-and-the-future-of-the-web</id>
    <content type="html"><![CDATA[<p>Last week <a href="http://www.quirksmode.org/about/">Peter-Paul Koch (PPK)</a> posted <a href="http://www.quirksmode.org/blog/archives/2015/07/stop_pushing_th.html">a lengthy treatise on why browsers should stop “pushing the web forward”</a>. I thoroughly enjoyed the read and agree with him on a number of points. I also agreed with the well-articulated responses from <a href="https://jakearchibald.com/2015/if-we-stand-still-we-go-backwards/">Jake Archibald (of Google)</a> and <a href="https://dev.opera.com/blog/on-a-moratorium-on-new-browser-features/">Bruce Lawson (of Opera)</a>. I guess I’m saying I see both sides. Like <a href="http://chriscoyier.net/">Chris Coyier</a>, I live in <a href="https://css-tricks.com/the-gray-gray-ghost-that-i-call-home/">a world filled with varying shades of grey</a> rather than stark black &amp; white.</p>

<!-- more -->

<h2 id="new-features-vs-interoperability">New Features vs. Interoperability</h2>

<p>One of the arguments PPK makes is against browsers competing on features. It really rang true to me:</p>

<blockquote>

I call for a moratorium on new browser features of about a year. Let’s postpone all completely new features that as of right now don’t yet work in any browser.

Browsers are encouraged to add features that are already supported by other browsers, and to write bug fixes. In fact, finding time for these unglorious but necessary jobs would be an important advantage of the moratorium. As an added bonus it would decrease the amount of tools web developers need.

</blockquote>

<p><a href="/notebook/competing-on-chrome/">Back in January</a>, I wrote about how I was excited by Microsoft’s announcement of “Project Spartan” (now “Microsoft Edge”) and it’s focus on interoperability. Interoperability’s a long word, so I’m gonna go with “interop” from here on out.</p>

<p>I was not on the Microsoft payroll at the time, but I was still stoked to see their focus on interop in the new rendering engine. They’d even gone, in my humble opinion, above and beyond in this regard—aliasing Webkit’s experimental, legacy CSS syntaxes to their modern, standards-based implementations. This ensured poorly coded sites worked well in their browser and didn’t penalize users for a designer’s mistake. Talk about being a good web citizen!</p>

<p>Of course, Microsoft Edge wasn’t the first browser to do this. <a href="http://snook.ca/archives/html_and_css/vendor-prefixes-competing">IE 7 Mobile implemented <code>-webkit-text-size-adjust</code> back in 2010</a>. <a href="https://dev.opera.com/articles/opera-mobile-emulator-webkit-prefix-support/">Opera</a> and <a href="https://wiki.mozilla.org/Platform/Layout/CSS_Compatibility#questions_and_methodology">Mozilla</a> also <a href="https://lists.w3.org/Archives/Public/www-style/2012Feb/0313.html">felt the pressure</a> and eventually implemented <code>-webkit-</code> vendors prefixes in versions of their browsers. It’s a weird world when one browser vendor is forced to implement another’s proprietary syntax just to make the web work, but it’s the sad state of things in our <a href="http://christianheilmann.com/2015/07/17/the-full-stackoverflow-developer/">full StackOverflow development</a> world.</p>

<p>With the move away from vendor prefixes in CSS to <a href="http://www.howtogeek.com/139736/how-to-change-hidden-advanced-settings-in-any-browser/">“feature flags”</a>, you’d think this sort of thing would be behind us, but it’s not. <a href="http://www.otsukare.info/">Karl Dubost</a>, of Mozilla, recently <a href="http://www.otsukare.info/2015/07/29/vendor-prefixes-market">bemoaned the implications of Apple’s latest vendor prefix silliness</a> on his blog. In that post, he made a keen observation:</p>

<blockquote>
  <p>We have reached the point where browser vendors have to start implementing or aliasing these WebKit prefixes just to allow their users to browse the Web, see <a href="https://wiki.mozilla.org/Compatibility/Mobile/Non_Standard_Compatibility">Mozilla</a> in Gecko and <a href="https://twitter.com/jacobrossi/status/614544147941355520">Microsoft</a> in Edge. The same thing is happening over again. In the past, browser vendors had to implement the quirks of IE to be compatible with the Web. As much as I hate it, we will have to specify the current <code>-webkit-</code> prefixes to implement them uniformly.</p>
</blockquote>

<p>I completely understand PPK’s desire for browsers to apply the brakes a bit and focus on interop. With new features being added to “the web”—but in reality only browser X, Y, or Z—on the regular, without guaranteed interop, it feels like we’re stirring up the browser wars again. All the new shiny is exciting, but I lived through the browser wars the first time and they sucked for everyone involved. <span data-quotable="">Web standards helped us get everyone on the same page and brokered what we’d hoped was going to be a lasting peace.</span></p>

<p>Now I’m not sure I agree with applying the brakes for a specific amount of time, but I do see great value in prioritizing interop over new features. And when browsers do implement new features, they should definitely put them behind feature flags (or some similar opt-in) to ensure we—the web development community—don’t start relying on some fancy new feature before it’s been vetted. Feature flags are awesome because they allow me, a designer, to experiment with a new technology <em>in my own browser</em> without affecting things for everyone else on the open web.</p>

<p><a href="http://alistapart.com/article/prefix-or-posthack">We used to think vendor prefixes were enough of a deterrent</a> to using a particular experimental CSS property or JavaScript method. Sadly that’s turned out to not be the case. I would bet good money on the sad reality that 80% of the working web designers out there don’t understand that <code>-*-</code> means “experimental” or even “proprietary”. We—the web design authors, speakers, educators, and other influencers—did a shitty job landing that message with the industry as a whole. But even if we’d hounded people about it, it probably wouldn’t have mattered: Vendor-prefixed properties work. And now they work even in browsers they were never meant to.</p>

<p>So, here’s what I’d love to see browser vendors do:</p>

<ol>
  <li>Prioritize interop over new features. Don’t halt development on new features, just put them on the back burner so the rising tide can, as they say, lift <em>all</em> the ships. Web developers and end users all benefit when there’s feature parity and stability among browsers.</li>
  <li>Put a ban on vendor-prefixes. They are not generally understood to be experimental. If you feel you must use a vendor prefix, ensure it’s only enabled by a corresponding feature flag.</li>
  <li>Use feature flags (or some similar opt-in) to enable developers to test experimental features in their own browsers, but also to ensure they aren’t available on the “open web” before they’re ready.</li>
</ol>

<h2 id="the-web-vs-native">The Web vs. Native</h2>

<p>PPK has harped on this a few times. There is currently a palpable tension between “native” and “the web”. It’s driving most of the new features in the web “platform”<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> and it’s giving many of us old-timers a touch of angina.</p>

<p>The reason is simple: The web was created as a massively interconnected document repository. A wealth of knowledge dependent on the hyperlink and the URL. The web was (and indeed still is) stateless by default, meaning it has no idea who you are or what you’ve done from request to request. This is very egalitarian: everyone has access and anyone can contribute.</p>

<p>As more businesses moved online, the web became necessarily transactional. Suddenly websites needed to know information about your “state” so they could sell you things and track your movements around their site and the rest of the web. With the advent of cookies and the Common Gateway Interface (CGI), a web server could adjust the content it sent in response to a request, based on what it knew about you and what you were doing.</p>

<p>Taking this simple capacity a step further, it became possible to write actual software on the web. Content management systems were probably the first big chunk of software to move online, but more soon followed. JavaScript came along and allowed us to add a bit of logic to the client side, reducing our reliance on round-trips to the server. Then we got Ajax and the whole JavaScript world exploded. We now have web-based photo editors, integrated development environments (IDEs), games, and more, all reliant on JavaScript’s ability to interact with the browser and manipulate what the user sees in real-time.</p>

<p>There were earlier machinations certainly, but the last ten years have seen the biggest push to bring more traditional software-like interactions to the web. Dozens of organizations, big and small, are trying to make their mark creating <em>the</em> framework for building these “next-generation” web-based app experiences. Honestly, I don’t have a problem with that. I don’t really have an interest in client-side frameworks, but I don’t have a problem with them either… provided developers who wish to bring their programming talents to the web take a little time to learn about the medium.</p>

<p><span data-quotable="">If you don’t take the time to understand how the web works, you’ll spend half your time cursing it and the other half trying to work around the things that frustrate you (which you will probably write off as “poorly designed” or “ill-conceived”).</span> If you don’t understand how the web works, you’ll build fragile experiences that collapse like a house of cards when any one of your many dependencies—the network, JavaScript, some particular element or browser API—isn’t available. If you don’t understand how the web works, what you build will simply be <a href="https://adactio.com/journal/8245">on the web, not of it</a>.</p>

<p>I don’t particularly care much about bringing “native like” “60fps” experiences to the web. It’s not that I don’t write software (I do), I just don’t really care if something I make for the web feels like a piece of installed software. I’ll do everything in my power to ensure my users have a great experience, but I know that each person’s experience will be a little bit different and I no longer feel the need to enforce my will on their experience. I’d rather create many ways for someone to interact with the things I build and hope one or more of those work well for whoever happens by and whatever device they happen to be using.</p>

<p>Native software and the web have always co-existed. We had installed software on computers long before the web even existed and we will continue to have installed software for as long as there are computers. Some software will move to the web if it makes sense for it to do so. Other software will remain native. Either option could be right or wrong depending on what you are trying to do. For instance, I would never personally write a photo editor in the browser because image processing requires a lot of memory and CPU cycles. Putting it in a browser moves it one more level away from the hardware. Abstraction eases development, but it invariably increases overhead and reduces performance.</p>

<p>Traditional software and the web can and should co-exist. They also can and should continue to inform one another. Ultimately, that will help us better serve the needs of our users, however they use our creations.</p>

<h2 id="change-vs-stagnation">Change vs. Stagnation</h2>

<p>Underpinning this whole “native vs. web” thing is, I think, a feeling many of us old-timers have that our web—the web we grew up building—is slipping away from us. We cling to the idea of the web as an open platform<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> for people to share their thoughts, passions, and cat photos. We like the web as it was originally. We like the web as we made it.</p>

<p>The web is changing. In some ways it’s changing for the better, in some ways for the worse. It’s a far different beast today than <a href="http://info.cern.ch/hypertext/WWW/TheProject.html">when Tim Berners-Lee typed that first <code>&lt;HEADER&gt;</code></a> and you can certainly do a lot more in the browser now than you could when I first picked up HTML. But I don’t think halting progress on the web is desirable.</p>

<p>As Jake points out in his response, stagnation is not a good policy. Stagnation pretty much killed BlackBerry. It also led to a lot of developer frustration in the guise of IE 6.</p>

<p>Change is not inherently bad. It’s pace can be quite frustrating at times, though. PPK certainly seems to be feeling that way about its speed now just as <a href="https://infrequently.org/2007/09/slides-from-my-standards-heresy-talk/">Alex Russell lamented its plodding progress back in 2007</a>. But when you take a step back, especially with a historical perspective, you see the changes are cyclical in many ways. The bandwidth issues we dealt with during the dial-up era are with us again in the form of mobile networks. The lessons we learned building a web for 640x480 screens are equally applicable in a world of wearables. And the text-based interactions we created in the very early days will serve as a template as we move boldly forward into the realm of voice-driven user experiences.</p>

<h2 id="cutting-edge-vs-craft">Cutting Edge vs. Craft</h2>

<p>In his post, PPK also complained that we’re simply getting too many new features on the web, which makes it hard to keep up. More than that, however, it makes it hard to truly come to a deeper understanding of how these different pieces work. To really hone our craft. In other words, it’s becoming harder to be an expert generalist.</p>

<p>Jake and Bruce completely get this, as do I. <a href="http://lanyrd.com/2015/web-design-day/sdpbgz/">Lyza Danger Gardener has even given an amazing talk on the topic</a>. The sheer volume of new drafts, specs, and concepts (not to mention tooling options) is overwhelming. I’m sure I don’t know half of the features that are in the HTML5 spec, let alone the umpteen CSS3 modules. I probably never will. And I’m ok with that. I’ll pick and choose the bits I’m interested in playing around with and find ways to integrate them into my practice a little at a time. That’s how we learn. That’s how we’ve always learned.</p>

<p>To assuage PPK’s fears, however, I would argue that there are a lot more of us working on the web now than there were in the more leisurely paced days he remembers so fondly. And we’re sharing what we learn. Whether driven by altruistic desire to spread knowledge or an interest in rockstar-like fame in the industry (or even a smidge of both), it doesn’t really matter how it happens—the fact is that it does. We learn and we share. And the tools we have today make it even easier to do so. Not only do we have the usual magazine and blogging outlets, but we also have CodePen and JS Bin and Github and more.</p>

<p>We each have the capacity to research the hell out of one specific area of web design and be the conduit for that knowledge into the web design hive mind. Look at <a href="https://www.google.com/search?q=sara+soueidan+svg">Sara Soueidan with SVG</a> or <a href="https://www.google.com/search?q=rachel+nabors+css+animation">Rachel Nabors with CSS Animation</a> or <a href="https://www.google.com/search?q=Zoe+Mickley+Gillenwater+flexbox">Zoe Mickley Gillenwater with flexbox</a>. <span data-quotable="">Individually, we will never be able to learn it all, but collectively we can.</span> Together, we can tackle any problem by accessing what we need to know when we need to know it.</p>

<h2 id="developer-convenience-vs-user-needs">Developer Convenience vs. User Needs</h2>

<p>Another angle in this very dense piece from PPK was around tooling and polyfills:</p>

<blockquote>
  <p>We get ever more features that become ever more complex and need ever more polyfills and other tools to function—<a href="http://www.quirksmode.org/blog/archives/2015/05/tools_dont_solv.html">tools that are part of the problem</a>, and not of the solution.</p>
</blockquote>

<p>The whole “polyfill it and move on” movement has him a little annoyed. I share his sentiment. I don’t think a JavaScript-based solution should be considered “good enough” for interop. <a href="http://kryogenix.org/code/browser/everyonehasjs.html">JavaScript is not guaranteed.</a> Moreover, JavaScript implementations are also never going to be as fast as a browser implementation. If browsers want to pick up a polyfill and implement it behind the scenes, that’s fine because it will run faster, but loading up our websites with potentially megabytes worth of polyfills in order to use new “standards” seems ludicrous.</p>

<p>As an industry, we are doing an awful lot of navel gazing. <span data-quotable="">We are spending more time solving our own development problems (legitimate in some cases, fabricated in others) by throwing more and more code at the problem.</span> As a consequence, our users are paying the price in <a href="http://www.theverge.com/2015/7/20/9002721/the-mobile-web-sucks">slower sites</a>, <a href="http://www.soasta.com/blog/page-bloat-average-web-page-2-mb/">heavier web pages</a>, <a href="http://www.yottaa.com/bid/277715/Why-Your-Website-Is-Slow-Poor-JavaScript-Performance">poor performance</a>, and <a href="http://farukat.es/journal/2015/02/708-how-flipboard-chose-form-over-function-their-web-version">bad experiences</a> (or <a href="http://sighjavascript.tumblr.com/">no experience</a>). And, on top of that, we’re solving <em>our</em> problems not <em>their</em> problems.</p>

<h2 id="all-is-not-lost">All is not lost</h2>

<p>We are designers. Design is about solving problems for our users, not creating new ones for them. Whether we are writing code, sketching interfaces, authoring copy, curating content, or building servers, we should make each and every decision based on what will benefit our users. If it means we can’t use some shiny new technology, so be it. We can still play with the new stuff in our own browser, on our personal sites, and on CodePen. We can learn about them in our own experimentation and share that knowledge with the rest of our industry. We can improve our craft. The web can get better.</p>
<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I think I just threw up in my mouth a little. I hate using that word when speaking about the web, but there it is. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>In the other sense of the word. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Lines in the Sand]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/lines-in-the-sand/"/>
    <updated>2015-03-11T09:21:29-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/lines-in-the-sand</id>
    <content type="html"><![CDATA[<p>A new site, <a href="http://breakupwithie8.com/">Break Up with Internet Explorer 8</a> by <a href="http://www.humaan.com/">Humaan</a>, has been making the rounds on the Interwebs of late. It’s cleverly done and an attractive site, but I don’t really agree with the premise:</p>

<blockquote>
  <p>Join the intervention and stop supporting IE8. It’s time for an upgrade.</p>
</blockquote>

<!-- more -->

<p>The reality is that some users don’t have control over the browsers installed on their computers and <a href="http://www.networkworld.com/article/2224510/microsoft-subnet/some-windows-xp-users-just-can-t-afford-to-upgrade.html">IE8 may be the best they can muster</a>. Most of us have had the luxury of moving on, but they haven’t. Does that mean we should banish those users from our sites by treating IE8 like that ex who just won’t take a hint? I don’t think so.</p>

<p>Instead, we should approach this problem rationally. Be the bigger person. Call it <a href="http://bradfrost.com/blog/mobile/support-vs-optimization/">support vs. optimization</a>, call it <a href="http://responsivenews.co.uk/post/18948466399/cutting-the-mustard">cutting the mustard</a>, call it what you will, but by understanding how browsers work, we can reduce our own development headaches and serve more users in the process. Yes, even when they use aging browsers like IE8 or IE7 or (gasp) IE6.</p>

<p>When it comes to HTML and CSS, browsers ignore what they don’t understand. It’s why you can use the <code>section</code> element and the content will still be exposed in Lynx. It’s also why you can use RGBa without IE6 collapsing. <a href="http://adaptivewebdesign.info/1st-edition/chapter-1.html#the-rise-of-tolerance">Fault tolerance is a really powerful tool</a> and is the foundation of progressive enhancement in HTML and CSS. (In JavaScript things are a little more complicated… we have to use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a>.)</p>

<p>A simple way to rid yourself of IE8 related headaches is to embrace the idea that <a href="http://dowebsitesneedtolookexactlythesameineverybrowser.com/">web pages don’t need to look (or behave) the same in every browser</a> and look for ways to achieve this while still providing access to your content and tools for less-capable browsers and devices. For example:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist20247370" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-css-filter-html" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-css-filter-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-css-filter-html-LC1" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">link</span> <span class="pl-e">rel</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>stylesheet<span class="pl-pds">&quot;</span></span> <span class="pl-e">href</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>simple.css<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
      <tr>
        <td id="file-css-filter-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-css-filter-html-LC2" class="blob-code blob-code-inner js-file-line">&lt;<span class="pl-ent">link</span> <span class="pl-e">rel</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>stylesheet<span class="pl-pds">&quot;</span></span> <span class="pl-e">href</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>complex.css<span class="pl-pds">&quot;</span></span> <span class="pl-e">media</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>only screen<span class="pl-pds">&quot;</span></span>&gt;</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/b9bca995a67ba298225d/raw/928c4c69fc1030fa3f4e8265c7e34bfb375ee44e/css-filter.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/b9bca995a67ba298225d#file-css-filter-html">css-filter.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>This simple stylesheet setup will deliver only the <code>simple.css</code> file to browsers that are incapable of understanding media queries. Browsers that do understand them will get both stylesheets. Media queries support is an easy line in the sand we can draw because <a href="http://www.slideshare.net/bryanrieger/rethinking-the-mobile-web-by-yiibu/79">lack of media query support is in fact the first media query</a>.</p>

<p>Once you’ve done that, it’s as simple as putting all of your advanced styles in the <code>complex.css</code> file. No drama.</p>

<p>On the JavaScript end, you can draw a line in the sand too. Let’s say you don’t want to spend your time debugging JavaScript in IE8. You can just skip it using <a href="http://www.quirksmode.org/css/condcom.html">Conditional Comments</a>:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist20247370" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-js-filter-html" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-html">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-js-filter-html-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-js-filter-html-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-c">&lt;!--[if gte IE 9]&gt;&lt;!--&gt;</span></td>
      </tr>
      <tr>
        <td id="file-js-filter-html-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-js-filter-html-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-s1">  &lt;<span class="pl-ent">script</span> <span class="pl-e">src</span>=<span class="pl-s"><span class="pl-pds">&quot;</span>not-for-ie8.js<span class="pl-pds">&quot;</span></span>&gt;&lt;/<span class="pl-ent">script</span>&gt;</span></td>
      </tr>
      <tr>
        <td id="file-js-filter-html-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-js-filter-html-LC3" class="blob-code blob-code-inner js-file-line"><span class="pl-c">&lt;!--&lt;![endif]--&gt;</span></td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/b9bca995a67ba298225d/raw/928c4c69fc1030fa3f4e8265c7e34bfb375ee44e/js-filter.html" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/b9bca995a67ba298225d#file-js-filter-html">js-filter.html</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>Using an approach like this avoids delivering the contained JavaScript files to IE8 at all, but all other browsers will see them.</p>

<p>If that’s too drastic, use <a href="http://learn.jquery.com/code-organization/feature-browser-detection/">feature detection</a> in your JavaScript files to determine if it is safe to rely on a particular method or capability. Program defensively.</p>

<p>Honestly, I’ve found that approaches like these lead to fewer grey hairs and a lower overall stress level. They make me a happier developer and let me concentrate on building for the future rather than worrying about the past.</p>

<p>But it’s not about breaking up with IE8, it’s about having a realistic and honest relationship with it.</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[The One Weird Trick That Takes the Pain Out of Cross-browser Testing]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/the-one-weird-trick-that-takes-the-pain-out-of-cross-browser-testing/"/>
    <updated>2015-01-26T11:24:25-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/the-one-weird-trick-that-takes-the-pain-out-of-cross-browser-testing</id>
    <content type="html"><![CDATA[<p>Love this!</p>

<p><div class='embed tweet'><blockquote class="twitter-tweet"><p>You&#39;ll never believe this one weird trick that takes the pain out of cross browser testing: Progressive enhancement.</p>&mdash; Orde Saunders (@decadecity) <a href="https://twitter.com/decadecity/status/559693419808034816">January 26, 2015</a></blockquote>
<script async src="//platform.twitter.com/widgets.js" charset="utf-8"></script></div></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Competing on “Chrome”]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/competing-on-chrome/"/>
    <updated>2015-01-21T15:20:40-05:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/competing-on-chrome</id>
    <content type="html"><![CDATA[<p>Watching the <a href="http://news.microsoft.com/windows10story/">Windows 10 announcement</a> today and the “unveiling” of its new browser, codenamed “Project Spartan”, I was amazed… not by what was said so much as what wasn’t.</p>

<!-- more -->

<p>Let me back up a bit here. As many of you know, I’ve been working on the Web for a long time and, like many old codgers, lived through the first browser wars and remember not only the unveiling of Internet Explorer 6—which was pretty amazing for its time—but I also worked on the Web for the entire 5 years that browser sat on the shelf.<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup></p>

<p>By the time Internet Explorer 7 came out in late 2006, there had been a number of advancements on the Web. And there was more competition for user and developer mindshare. Safari popped up shortly after IE6’s launch and was gaining traction on the Mac with its port of Konqueror’s layout engine, KHTML, which they renamed WebKit. Netscape was in it’s death throes, but Firefox arose from the ashes<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> and was capturing an ever-growing share of the market with its improved security, extensibility through browser plug-ins, and tabbed browsing. Not only that, but the Mozilla core of Firefox had also been spun into several other browsers that were similarly taking off: Camino, Flock, SeaMonkey, Galeon, and Epiphany. And then, of course, the Opera browser was still going strong on the desktop and growing rapidly in the mobile space.<sup id="fnref:3"><a href="#fn:3" class="footnote">3</a></sup></p>

<p>When IE7 finally made it out into the world, developers were at peak frustration when it came to dealing with standards-compatibility issues in IE. So it’s no surprise that the messaging focus for IE7 was, at least in terms of the Web designer/developer audience, focused on <a href="http://www.zdnet.com/article/ie7-and-standards-compliance-microsofts-chris-wilson-charts-progress/">apologizing for the past and promising that they cared about (and were supporting) interoperable Web standards</a>.</p>

<p>And this was an earnest sentiment, it wasn’t bullshit. I remember <a href="https://twitter.com/cwilso">Chris Wilson</a>—then Platform Architect of Internet Explorer Platform team—telling me he had personally printed out <a href="http://www.w3.org/TR/CSS2/">the entire CSS 2.1 spec</a> and put it on the desk of each developer working on Trident, the browser’s rendering engine.</p>

<p>And IE7, for all of its faults, was an improvement over IE6. A few years later, IE8 was an improvement over that. And, a little later, IE9 gave us a completely reborn Internet Explorer, largely free of the layout and rendering quirks we had earned so much grey hair fighting. And so on. And so on. But all the while, the drumbeat from the IE team was this: Now with more standards support!</p>

<p>And it wasn’t just IE that was making this claim. Other browsers began to tout their support of one particular standard or another that the others didn’t in hopes of getting developers to pay more attention to them.</p>

<p>Some time before the launch of IE8, I remember having a conversation with Chris Wilson over drinks at a conference. We talked at length about the state of Web standards, browsers, and the like. During the course of our chat, he offered up his dream:</p>

<blockquote>
  <p>I’ll be happy when browsers stop competing on standards support and start competing on chrome.<sup id="fnref:4"><a href="#fn:4" class="footnote">4</a></sup></p>
</blockquote>

<p>It stuck with me because what he was saying made a lot of sense: Standards-compliance should be a given; browsers should be competing on the extra stuff they offer.</p>

<p>Which brings me back to today’s announcement. Standards-compliance wasn’t mentioned<sup id="fnref:5"><a href="#fn:5" class="footnote">5</a></sup> by <a href="https://twitter.com/joebelfiore">Joe Belfiore</a> in his walkthrough of “Project Spartan”. Instead, Joe focused on the value adds in the browser: in-app note taking, a focused reading mode, cross-device synchronization, and Cortana integration.</p>

<p>This is a major milestone for IE in my opinion and it makes me wonder if we’ve finally reached the place that Chris dreamed about all those years ago. I certainly hope so.</p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>I was told that, internally, decision-makers felt the browser was “done” and there would be no more advancements on the Web that would require a new browser. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>An apt metaphor, Firefox was originally Phoenix, then later Firebird, before eventually becoming Firefox. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:3">
      <p>You may not realize it, but Opera Mobile predated even IE6. And it’s Opera Mini variant touts big numbers too: In April 2014, there were over 267 million Opera mobile browser users (244 million of whom used Opera Mini) and Opera Mini users viewed over 177 billion pages in that same month. (<a href="http://www.operasoftware.com/smw/2014-04">Source</a>) <a href="#fnref:3" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:4">
      <p>The Chrome browser, from Google, did not exist at this time. By “chrome” he meant the window around a webpage—it toolbars, buttons, menus, and other browser-based functionality. <a href="#fnref:4" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:5">
      <p>The only phrases that even hint at standards compliance were “modern Web” and “a new rendering engine… that is compatible with how the Web is written today” (starting at around 59:05 in <a href="https://ll.ms-studiosmedia.com/events/2015/1501/Windows10CP/live/Windows10CP.html?title=Windows10CP-mscom">the video</a>). <a href="#fnref:5" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
  </entry>
  
</feed>
