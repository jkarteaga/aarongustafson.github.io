<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Browse by Tag: Sass | Aaron Gustafson]]></title>
  <link href="https://www.aaron-gustafson.com/notebook/tags/sass/atom.xml" rel="self"/>
  <link href="https://www.aaron-gustafson.com/"/>
  <updated>2016-06-01T13:51:31-04:00</updated>
  <id>https://www.aaron-gustafson.com/</id>
  <author>
    <name><![CDATA[Aaron Gustafson]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Quantity Queries… Where Have You Been All My Life?]]></title>
    <link href="https://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life/"/>
    <updated>2015-03-20T11:00:03-04:00</updated>
    <id>https://www.aaron-gustafson.com/notebook/quantity-queries-where-have-you-been-all-my-life</id>
    <content type="html"><![CDATA[<p><a href="http://twitter.com/heydonworks">Heydon Pickering</a>’s <a href="http://alistapart.com/article/quantity-queries-for-css">Quantity Queries for CSS</a> is sheer brilliance and it’s so simple I’m surprised we hadn’t landed on the idea sooner.</p>

<!-- more -->

<p>We’ve all experienced this feeling: <em>I have no idea how many modules will be in this block, but I would love to lay them out differently depending on that number.</em> Short of writing exhaustive CSS to (hopefully, optimistically) cover all of your bases, we had not figured out a good way to do this.</p>

<p>Heydon to the rescue!</p>

<p>Here’s Heydon’s first quantity query example:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist20567997" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-equal-css" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-equal-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-equal-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">li</span><span class="pl-e">:nth-last-child</span>(<span class="pl-c1">6</span>)<span class="pl-e">:first-child</span>, </td>
      </tr>
      <tr>
        <td id="file-equal-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-equal-css-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">li</span><span class="pl-e">:nth-last-child</span>(<span class="pl-c1">6</span>)<span class="pl-e">:first-child</span> ~ <span class="pl-ent">li</span> {</td>
      </tr>
      <tr>
        <td id="file-equal-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-equal-css-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-c1"><span class="pl-c1">color</span></span>: <span class="pl-c1">green</span>;</td>
      </tr>
      <tr>
        <td id="file-equal-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-equal-css-LC4" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/eddda1f32ed102cedd86/raw/70742167354e0e0cbb87e86b805eb4efe1de605f/equal.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/eddda1f32ed102cedd86#file-equal-css">equal.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>With these selectors, the rule set would only apply if the total count of list items was exactly 6. Here’s what he is selecting:</p>

<ol>
  <li>A list item (<code>li</code>) that is 6th sibling in a group of list item siblings when counted backwards (<code>:nth-last-child(6)</code>), but only if it is also the first of those siblings (<code>:first-child</code>); and</li>
  <li>Any list item (<code>li</code>) siblings that follow the one selected above (<code>~</code>).</li>
</ol>

<p>Brilliant! <a href="http://alistapart.com/article/quantity-queries-for-css#section4">Heydon breaks it down way more eloquently</a> (and with illustrated squid to boot). To use this in your own projects, simply swap the “6” for whatever count you are looking for it to be equal to.</p>

<p>But Heydon doesn’t stop there. He also gives us ways to test for  more than or equal to and fewer than or equal to a certain number. We’ll start with the <br />
“more than” variant (because everyone always wants more):</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist20567997" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-more-than-or-equal-css" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-more-than-or-equal-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-more-than-or-equal-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">li</span><span class="pl-e">:nth-last-child</span>(<span class="pl-c1">n+6</span>),</td>
      </tr>
      <tr>
        <td id="file-more-than-or-equal-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-more-than-or-equal-css-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">li</span><span class="pl-e">:nth-last-child</span>(<span class="pl-c1">n+6</span>) ~ <span class="pl-ent">li</span> {</td>
      </tr>
      <tr>
        <td id="file-more-than-or-equal-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-more-than-or-equal-css-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-c">/* properties here */</span></td>
      </tr>
      <tr>
        <td id="file-more-than-or-equal-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-more-than-or-equal-css-LC4" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/eddda1f32ed102cedd86/raw/70742167354e0e0cbb87e86b805eb4efe1de605f/more-than-or-equal.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/eddda1f32ed102cedd86#file-more-than-or-equal-css">more-than-or-equal.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>This one is slightly more complex, using the <code>nth-*</code> formula to manage the calculation. In English, this selects:</p>

<ol>
  <li>A list item (<code>li</code>) which is the sixth, seventh, eighth, etc. sibling in a collection of list item siblings when counted backwards from the end of that collection (<code>:nth-last-child(n+6)</code>); and</li>
  <li>Any list item (<code>li</code>) siblings that follow the one(s) selected above (<code>~</code>).</li>
</ol>

<p>The magic is in the formula: <em>n+6</em>.</p>

<p>The way <code>nth-*</code> formulae work is that the “n” portion is about dividing the siblings into smaller groups based on the <em>n</em> multiplier. So “2n” means for every group of 2, “3n” means for every group of 3, and so on. In Heydon’s case, “n” simply means for every group of 1. The <em>n</em> multiplier starts as zero (for the first group) and then becomes 1, 2, 3, etc. in succession.</p>

<p>The number added or subtracted from this number (“+6” in the example) can be though of as the item in the count. Most often we see this in use as “2n+2” which stands for the second sibling in every group of two. It’s usually common to see this number be smaller than the grouping number (“3n+2”, “5n+3”, etc.). In Heydon’s example, however there is no grouping, so that logic doesn’t really apply. Instead you can think of it as simply adding the multiplier to 6: 0+6 (6), 1+6 (7), 2+6 (8), etc.</p>

<p>Now count from the end and then select that and everything that follows and you get a “more than or equal to” count based on the number (6 in his case, but again you can swap it out). Brilliant!</p>

<p>The final example he gives is for fewer than or equal to a particular number:</p>

<p><div><link rel="stylesheet" href="https://assets-cdn.github.com/assets/gist-embed-51ae8299bd14b6c42fb20b0ce07f643175347abaca051f9c55e114bfc98b10b1.css">
<div id="gist20567997" class="gist">
    <div class="gist-file">
      <div class="gist-data">
        <div class="js-gist-file-update-container js-task-list-container file-box">
  <div id="file-fewer-than-or-equal-css" class="file">
    

  <div itemprop="text" class="blob-wrapper data type-css">
      <table class="highlight tab-size js-file-line-container" data-tab-size="8">
      <tr>
        <td id="file-fewer-than-or-equal-css-L1" class="blob-num js-line-number" data-line-number="1"></td>
        <td id="file-fewer-than-or-equal-css-LC1" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">li</span><span class="pl-e">:nth-last-child</span>(<span class="pl-c1">-n+6</span>)<span class="pl-e">:first-child</span>,</td>
      </tr>
      <tr>
        <td id="file-fewer-than-or-equal-css-L2" class="blob-num js-line-number" data-line-number="2"></td>
        <td id="file-fewer-than-or-equal-css-LC2" class="blob-code blob-code-inner js-file-line"><span class="pl-ent">li</span><span class="pl-e">:nth-last-child</span>(<span class="pl-c1">-n+6</span>)<span class="pl-e">:first-child</span> ~ <span class="pl-ent">li</span> {</td>
      </tr>
      <tr>
        <td id="file-fewer-than-or-equal-css-L3" class="blob-num js-line-number" data-line-number="3"></td>
        <td id="file-fewer-than-or-equal-css-LC3" class="blob-code blob-code-inner js-file-line">  <span class="pl-c">/* properties here */</span></td>
      </tr>
      <tr>
        <td id="file-fewer-than-or-equal-css-L4" class="blob-num js-line-number" data-line-number="4"></td>
        <td id="file-fewer-than-or-equal-css-LC4" class="blob-code blob-code-inner js-file-line">}</td>
      </tr>
</table>

  </div>

  </div>
  
</div>

      </div>
      <div class="gist-meta">
        <a href="https://gist.github.com/aarongustafson/eddda1f32ed102cedd86/raw/70742167354e0e0cbb87e86b805eb4efe1de605f/fewer-than-or-equal.css" style="float:right">view raw</a>
        <a href="https://gist.github.com/aarongustafson/eddda1f32ed102cedd86#file-fewer-than-or-equal-css">fewer-than-or-equal.css</a>
        hosted with &#10084; by <a href="https://github.com">GitHub</a>
      </div>
    </div>
</div>

</div></p>

<p>This one is largely the same as the “more than” example, but the multiplier is reversed (with the minus sign) which means the count runs backward: 0+6 (6), -1+5 (5), -2+6 (4), and so on.</p>

<p>I am just overjoyed with how brilliant this is. I can think of so many places to use it (and will likely be doing so quite soon).</p>

<h2 id="bonus-now-with-sass">Bonus: Now with SASS</h2>

<p><a href="https://twitter.com/danielguillan">Daniel Guillan</a> has <a href="https://github.com/danielguillan/quantity-queries">ported this functionality (and more) to SASS</a> using a handful of really straightforward mixins. Here’s a demo:</p>

<figure id="fig-2015-03-20-01" class="media-container"><p class="codepen" data-user="danielguillan" data-href="GgBOxm" data-height="331" data-type="result" data-preview="true">See the Pen <a href="http://codepen.io/danielguillan/pen/GgBOxm">Quanity Queries Sass mixins demo</a> by Daniel Guillan (<a href="//codepen.io/danielguillan">danielguillan</a>) on <a href="//codepen.io">CodePen</a>.</p><script async src="//codepen.io/assets/embed/ei.js"></script></figure>

<p>Happy counting!</p>
]]></content>
  </entry>
  
</feed>
