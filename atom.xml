<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
	<title><![CDATA[Aaron Gustafson Latest Posts &amp; Links]]></title>
	<link href="https://www.aaron-gustafson.com/atom.xml" rel="self"/>
	<link href="https://www.aaron-gustafson.com/"/>
	<updated>2016-10-26T17:11:28-04:00</updated>
	<id>https://www.aaron-gustafson.com/</id>
	<author>
		<name><![CDATA[Aaron Gustafson]]></name>
		
	</author>
	<generator uri="http://octopress.org/">Octopress</generator>

	
		
			<entry>
				<title type="html"><![CDATA[Link: iOS Doesn’t Support Progressive Web Apps, So What?]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/ios-doesnt-support-progressive-web-apps-so-what/"/>
				<updated>2016-10-26T11:13:17-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/ios-doesnt-support-progressive-web-apps-so-what</id>
				<content type="html"><![CDATA[<p>As usual, Jason Grigsby nails it:</p>

<ul>
  <li>Progressive Web Apps still work on iOS</li>
  <li>Progressive Web Apps perform better on iOS</li>
  <li>Billions of people use browsers that support Progressive Web Apps</li>
  <li>Apple appears to be warming to Progressive Web App technology</li>
  <li>Progressive Web Apps benefit all users</li>
</ul>

<p>Done and done.</p>
<p><a rel="full-article" href="https://cloudfour.com/thinks/ios-doesnt-support-progressive-web-apps-so-what/">Read on The Cloud Four Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Post: One Person’s Bloat…]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/one-persons-bloat-dot-dot-dot/"/>
				<updated>2016-10-25T15:15:01-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/one-persons-bloat-dot-dot-dot</id>
				<content type="html"><![CDATA[<figure id="fig-2016-10-25-1" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-25/webbloatscore.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-25/webbloatscore.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-25/webbloatscore.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-25/webbloatscore.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /></figure>

<p>The <a href="http://www.webbloatscore.com/">Web Bloat Score Calculator</a> has been making the rounds on Twitter and I wanted to share my immediate thoughts on it.</p>

<!-- more -->

<p>First off, I am a big fan of simple tools that provide an often much-needed reality check on a project. Based squarely on its simplicity, I’d put this tool right up there alongside <a href="https://www.webpagetest.org/">WebPageTest</a> and <a href="https://whatdoesmysitecost.com/">What Does My Site Cost?</a>. The Web Bloat Score (or WebBS… clever) Calculator is about as simple an interface as you can get: Enter a URL &amp; hit the “Calculate” button.</p>

<p>When you do this, the service runs two tasks:</p>

<ol>
  <li>Load the URL and all of its assets, calculating a total page weight and chronicling the number of requests required to get there; and</li>
  <li>Generate a static screen capture of the page and then grab its file size.</li>
</ol>

<p>Once it has these two bits of info, it compares the real file size of the tested page against the image version to come up with your WebBS.</p>

<p>I <a href="http://www.webbloatscore.com">ran the calculator against the 10k Apart contest homepage</a> and here are the results:</p>

<table>
  <thead>
    <tr>
      <th style="text-align: left">URL</th>
      <th style="text-align: left">Page Size</th>
      <th style="text-align: left">Requests</th>
      <th style="text-align: left">Image Size</th>
      <th style="text-align: left">WebBS</th>
    </tr>
  </thead>
  <tbody>
    <tr>
      <td style="text-align: left">https://a-k-apart.com/</td>
      <td style="text-align: left">200 <abbr title="kilobytes">kB</abbr></td>
      <td style="text-align: left">49</td>
      <td style="text-align: left">195 <abbr title="kilobytes">kB</abbr></td>
      <td style="text-align: left">1.03</td>
    </tr>
  </tbody>
</table>

<p>Not too bad, considering <a href="http://www.webbloatscore.com/Details/612ea9a9-c548-4e20-99d1-910b449ba2c4">the number of images on the page</a> and the interactivity of the SVG. In the documentation about the tool, they have this to say about a high WebBS:</p>

<blockquote>
  <p>A high WebBS usually indicates unused stuff on the page: JavaScript, CSS, oversized images, etc. Maybe you have a valid reason for that content. But more often than not, it means you can optimize it more.</p>
</blockquote>

<p>I completely agree with the sentiment here: smaller is better and if there’s a huge discrepancy between the file size of an image of your page and the page itself, there <em>may</em> be something not so awesome going on behind the scenes. They reference Amazon as being particularly bad, with a WebBS of 20 (<a href="http://www.webbloatscore.com/Details/4abea720-677c-48f6-9ff2-2b816424be06">I got 12.3 in my test</a>, but Amazon frequently changes their homepage).</p>

<p>There’s always room for improvement when it comes to optimization, but I also worry about folks getting too hung up on numbers like this, especially striving for a score of 1 or less. Here are a few legitimate reasons your score may be more than 1:</p>

<ul>
  <li><strong>Your page is heavily interactive.</strong> The calculator does not take into account any sort of interactivity—progressively enhanced or not—nor does it tell you how well-optimized your JavaScript code is. There’s also the possibility that you’ve consciously decided to trade verbosity for speed. For large loops, for instance, <a href="https://en.wikipedia.org/wiki/Duff%27s_device">Duff’s device</a> is much faster but a lot more verbose than a normal <code>for</code> loop.</li>
  <li><strong>Your page serves alternate file formats.</strong> The tool runs <a href="http://slimerjs.org/">SlimerJS</a> to collect the performance data and, for instance, it doesn’t currently support WebP images. We serve WebP with a JPG or PNG fallback on the 10k Apart site (using <code>picture</code>), but <a href="http://www.webbloatscore.com/Details/612ea9a9-c548-4e20-99d1-910b449ba2c4">the file log</a> doesn’t include the WebP images at all.</li>
  <li><strong>You make use of micro-optimizations.</strong> Perhaps you use <a href="https://github.com/filamentgroup/loadCSS"><code>loadCSS</code></a> or <a href="https://github.com/filamentgroup/loadJS"><code>loadJS</code></a> or split your CSS into a default and advanced stylesheet (with the advanced one only loading if media queries are supported). Perhaps you lazy load images or fonts via JavaScript. Perhaps you only load certain assets or scripts based on browser capabilities. The calculator takes none of this into account.</li>
</ul>

<p>These are just three reasons to take your WebBS with a grain of salt. It’s good for a gut-check, but I wouldn’t spend a whole lot of time worrying about getting your score at or below 1.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Technical Credit]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/technical-credit/"/>
				<updated>2016-10-25T15:11:08-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/technical-credit</id>
				<content type="html"><![CDATA[<p>This is an excellent post about progressive enhancement from the “technical credit” (as opposed to “technical debt”) point of view.</p>
<p><a rel="full-article" href="https://www.stillbreathing.co.uk/2016/10/13/technical-credit">Read on Still Breathing&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Is Progressive Enhancement Over?]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/bd88e8cdfa/"/>
				<updated>2016-10-25T14:24:23-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/bd88e8cdfa</id>
				<content type="html"><![CDATA[<p>This is an excellent missive from Nicholas covering the progressive enhancement debate.</p>

<blockquote>
  <p>First … progressive enhancement isn’t about having a JavaScript vs. JavaScript-disabled experience, it’s about providing the best possible user experience throughout the entire lifecycle of the web application. …</p>
</blockquote>

<blockquote>
  <p>Second, progressive enhancement isn’t a strict prescription, it’s a way of thinking about the software you’re building. … Instead, it encourages you to think more deeply about the problem you’re trying to solve, and guides you towards solutions that work for the maximum number of users.</p>
</blockquote>

<blockquote>
  <p>These two points are why I believe progressive enhancement is as relevant today as it has ever been. The only difference now is that we have more options for improving the user experience than ever before.</p>
</blockquote>

<p>I couldn’t have said it better myself.</p>
<p><a rel="full-article" href="https://www.nczonline.net/newsletter/archive/bd88e8cdfa/">Read on NCZOnline Newsletter&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: A (Not So) Short Note on ARIA to the Rescue]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/a-not-so-short-note-on-aria-to-the-rescue/"/>
				<updated>2016-10-25T11:31:24-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/a-not-so-short-note-on-aria-to-the-rescue</id>
				<content type="html"><![CDATA[<p>Accessibility is hard. It’s a broad term encompassing a variety of special needs ranging from low vision and color blindness to motor impairment and language barriers (to name but a few) which means guaranteeing our projects are “100% accessible” is a significant challenge.</p>

<p>Accessibility becomes even more of a challenge when you begin to factor in the dependency chain. Blind and low-vision users, for example, often use screen readers in order to access the Web. With screen readers, we need to consider the capabilities of both the browser <em>and</em> the screen reader being used. If either piece of software isn’t up to the task or contains a bug our users suffer for it.</p>

<p>Getting multiple inter-dependent programs on the same page sometimes requires that we do things we’d rather not do. This post from Steve Faulkner chronicles one such case where the particular versions of Chrome and JAWS required for a project didn’t see eye-to-eye on the semantics of heading levels. He talks about the issue and the less-than-optimal fix he had to put in place to ensure users got the experience they were meant to.</p>
<p><a rel="full-article" href="https://www.paciellogroup.com/blog/2016/10/a-not-so-short-note-on-aria-to-the-rescue/">Read on The Paciello Group&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Flex-grow 9999 Hack]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/flex-grow-9999-hack/"/>
				<updated>2016-10-24T13:39:15-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/flex-grow-9999-hack</id>
				<content type="html"><![CDATA[<p>Very clever bit of flexbox here for laying out text optimally when you don’t know its length.</p>

<p>I don’t know that I would consider it a hack so much as pushing flexbox beyond what most people would even consider doing.</p>
<p><a rel="full-article" href="http://joren.co/flex-grow-9999-hack/">Read on Flex-grow 9999 Hack&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Refreshing the Verge]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/refreshing-the-verge-no-platform-like-home/"/>
				<updated>2016-10-24T13:29:55-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/refreshing-the-verge-no-platform-like-home</id>
				<content type="html"><![CDATA[<p>I love how Mandy deftly wove progressive enhancement into her content strategy and publishing discussion:</p>

<blockquote>
  <p>Perhaps ironically, we’ve found that the best way to create that resiliency is by harking back to the web principle of <em>progressive enhancement</em>: each story created in Chorus begins as a platform-neutral collection of text, images, and video. That foundation ensures that we can publish that story as easily to our own platform as to, say, AMP or Apple News, and be confident that our audience will experience that story in a way that fits whichever platform they are using. On our own platform, we’re then free to enhance up, adding stylistic or experiential flairs that elevate the experience of the story. This practice — which I refer to unoriginally as <em>progressively enhanced storytelling</em> — also has the added benefit of helping us make our content more accessible to more kinds of users, especially those with disabilities. (It wouldn’t be inaccurate to consider speaking browsers one among the many platforms we must publish to.)</p>
</blockquote>
<p><a rel="full-article" href="http://www.theverge.com/2016/10/21/13331208/refreshing-the-verge-no-platform-like-home">Read on The Verge&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: crossfit.js]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/crossfit-js/"/>
				<updated>2016-10-24T12:55:52-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/crossfit-js</id>
				<content type="html"><![CDATA[<p>A hilarious and completely accurate reflection on the cultural similarities shared by JavaScript and crossfire enthusiasts.</p>
<p><a rel="full-article" href="https://www.christianheilmann.com/2016/10/18/crossfit-js/">Read on Christian Heilmann&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Post: Progressive Misconceptions]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/progressive-misconceptions/"/>
				<updated>2016-10-17T15:33:55-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/progressive-misconceptions</id>
				<content type="html"><![CDATA[<p>Last week, my colleague<sup id="fnref:1"><a href="#fn:1" class="footnote">1</a></sup> <a href="https://nolanlawson.com/">Nolan Lawson</a> wrote <a href="https://nolanlawson.com/2016/10/13/progressive-enhancement-isnt-dead-but-it-smells-funny/">a lengthy post about his struggles with progressive enhancement</a>. In it, he identified a key tension between the JavaScript community and the progressive enhancement community that has, frankly, existed since the term “progressive enhancement” was coined some 13 years ago. I wanted to take a few minutes to tuck into that tension and assure Nolan and other folks within the JS community that neither progressive enhancement nor the folks who advocate it (like me) is at odds with them or their work.</p>

<!-- more -->

<p>But first let’s take a a trip back in time to 2003. In March of that year, <a href="http://hesketh.com/publications/inclusive_web_design_for_the_future.html">Steve Champion introduced a concept he called “progressive enhancement”</a>. It caused a bit of an upheaval at the time because it challenged the dominant philosophy of graceful degradation. Just so we’re all on the same page, I’ll compare these two philosophies.</p>

<h2 id="whats-graceful-degradation">What’s graceful degradation?</h2>

<p><em>Graceful degradation</em> assumes that an experience is going to be worse on older, less capable browsers and devices. To address potential problems, it recommends that developers take steps to avoid throwing errors—JavaScript or otherwise—for their users. Under this philosophy, a developer can take a range of approaches ranging from making everything work perfectly in down-level browsers to only addressing egregious errors or even chosing to block certain browsers from accessing the content if they are known to have problems. We saw this latter approach often with Flash-only sites, but it wasn’t limited to them. I used <a href="#2016-10-17-1">this “roadblock” example from Kodak.com</a> in <a href="http://adaptivewebdesign.info/">my book</a>:</p>

<figure id="fig-2016-10-17-1" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-17/kodak-roadblock.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-17/kodak-roadblock.png&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-17/kodak-roadblock.png&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-17/kodak-roadblock.png&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /></figure>

<p>Overall, graceful degradation is about risk avoidance. The problem was that it created a climate on the Web where we, as developers, got comfortable with the idea of denying access to services (e.g., people’s bank accounts) because we deemed a particular browser (or browsers) too difficult to work with. Or, in many cases, we just didn’t have the time or budget (or both) to address the broadest number of browsers. It’s kind of hard to reconcile the challenge of cross-browser development in 2003 with what we are faced with today as we were only really dealing with 2-3 browsers back then, but you need to remember that standards support was far worse at the time.</p>

<h2 id="so-whats-progressive-enhancement">So what’s progressive enhancement?</h2>

<p>In his talk, Steve upended the generally shared perspective that older browsers deserved a worse experience because they were less technically capable. He asked us to look beyond the browsers and the technologies in play and focus on the user experience, challenging us to design inclusive experiences that would work in the broadest of scenarios. He asked that we focus on the content and core tasks in a given interface and then enhance the experience when we could. We accomplish this by layering experiences on top of one another, hence “progressive enhancement”.</p>

<p>What’s particularly interesting about this approach is that it is still technically graceful degradation because all of the interfaces do gracefully fall back to a usable state. But it’s graceful degradation at its best, focused on delivering a good experience to everyone. No excuses.</p>

<p>To give a simple example, consider a form field for entering your email address. If we were to mark it up like this</p>

<pre><code>&lt;input type="email" name="email" id="email"&gt;
</code></pre>

<p>I automatically create layers of experience with no extra effort:</p>

<ol>
<li>Browsers that don’t understand “email” as a valid <code>input</code> type will treat the “email” text as a typo in my HTML (like when you type “rdio” instead of “radio”… or maybe I’m the only one that does that). As a result, they will fall back to the default input type of “text”, which is usable in every browser that supports HTML2 and up.</li>
<li>Browsers that consider “email” a valid <code>input</code> type will provide one (or more) of many potential enhanced experiences:
<ol type="a">
<li>In a virtual keyboard context, the browser may present a keyboard that is tailored toward quickly entering email addresses.</li>
<li>In a browser that supports auto-completion, it may use this as a cue to suggest entering a commonly-entered email or one that has been stored in the user’s profile.</li>
<li>In a browser that supports HTML5 validation, the browser may validate this field for proper email formatting when the user attempts to submit the form.</li>
<li>In a browser that does not support HTML5 validation or that doesn’t actively block submission on validation errors—<a href="https://bugs.webkit.org/show_bug.cgi?id=28649">like Safari</a>—a developer-supplied JavaScript program may use the <code>type</code> attribute as a signal that it should validate the field for proper email address formatting.</li>
</ol>
</li>
</ol>

<p>That means that there are between 5 and 13 potential experiences (given all of the different possible combinations of these layers) in this one single single element… it’s kind of mind-boggling to think about, right? And the clincher here is that any of these experiences can be a good experience. Heck for nearly 15 years of the Web, the plain-ol’ text <code>input</code> was the only way we had for entering an email address. Anything better than that is gravy.</p>

<p>Progressive enhancement embraces the idea of experience as a continuum rather than some singular ideal. It recognizes that every person is different and we all have special requirements for Web access. Some may depend on our browser, the device we’re on, and the network we are using. Others may be the result of a limitation we have dealt with since birth, are dealing with temporarily as the result of an injury or incident, or are simply a factor of our current situation. We all experience the world differently and progressive enhancement not only respects that, it embraces that variability.</p>

<p>How does it do this? Progressive enhancement takes advantage of the fault tolerant nature of HTML and CSS. It also uses JavaScript’s own ability to test for browser features to tailor programmatic enhancements to the given device and situation. That’s right: progressive enhancement and JavaScript go hand-in-hand.</p>

<h2 id="why-are-so-many-javascript-folks-hostile-to-progressive-enhancement">Why are so many JavaScript folks hostile to progressive enhancement?</h2>

<p>As a member of the JavaScript community for over a decade now, I have theory for why many JavaScript developers are so antagonistic toward progressive enhancement. Part of it has to do with history and part of it has to do with programming culture. Let’s tackle the history first.</p>

<p>When progressive enhancement was first proposed, the Web was getting more standardized, but things were still a bit of a mess… especially in the JavaScript world. Many JavaScript programs were poorly-written, contained lots of browser-specific code, and were generally unfriendly to anyone who fell outside of the relatively narrow band of “normal” Web use… like screen reader users, for example. It’s not surprising though: Graceful degradation was the name of the game at the time.</p>

<p>Because JavaScript programs were creating barriers for users who just wanted to read news articles, access public services, and check their bank accounts, many accessibility advocates recommended that these folks disable JavaScript in their browsers. By turning off JavaScript, the theory went, users would get clean and clear access to the content and tasks they were using the Web for. Of course that was in the days before Ajax, but I digress.</p>

<p>This recommendation served as a bit of a wake-up call for many JavaScript developers who had not considered alternate browsing experiences. Some chose to write it off and continued doing their own thing. Others, however, accepted the challenge of making JavaScript more friendly to the folks who relied on assistive technologies (AT). Many even went on to write code that actually improved the experience specifically for folks who are AT-dependent. Dojo and YUI, though sadly out of favor these days, were two massive libraries that prioritized accessibility. In fact, I’d go so far as to say they ushered in a period of alignment between JavaScript and accessibility.</p>

<p>Even though JavaScript and accessibility are no longer at odds (and really haven’t been for the better part of a decade), there are still some folks who believe they are. People routinely come across old articles that talk about JavaScript being inaccessible and they turn around and unfairly demonize JavaScript developers as unsympathetic toward folks who rely on screen readers or other AT. It’s no wonder that some JavaScript developers become immediately defensive when the subject of accessibility comes up… especially if it’s not something they’re all that familiar with.</p>

<hr />

<p>I also mentioned that programming culture plays a part in the antagonistic relationship between the progressive enhancement camp and the JavaScript community. If you’ve been a programmer for any amount of time, you’ve probably borne witness to the constant finger-pointing, belittling, and arrogance when it come to the languages we choose to program in or the tools we use to do it.</p>

<p>As a programmer, you receive a near constant barrage of commentary on your choices… often unsolicited. <em>You’re using PHP? That’s so 1996! You’re still using TextMate?! You still use jQuery? How quaint!</em> I’m not exactly sure where this all began, but it’s unhealthy and causes a lot of programmers to get immediately defensive when anyone challenges their language of choice or their process. And this hostile/defensive environment makes it very difficult to have a constructive conversation about best practices.</p>

<p>Progressive enhancement should not be viewed as a challenge to JavaScript any more than concepts like <a href="https://www.safaribooksonline.com/library/view/learning-javascript-design/9781449334840/ch13s15.html">namespacing</a>, <a href="https://en.wikipedia.org/wiki/Test-driven_development">test driven development</a>, or <a href="http://www.yottaa.com/company/blog/application-optimization/how-does-reducing-javascript-requests-minifying-javascript/">file concatenation &amp; minification</a> are; it’s just another way to improve your code. That said, progressive enhancement does introduce a wrinkle many for hardcore JavaScript programmers seem unwilling to concede: JavaScript is fragile. At least on the client side, JavaScript development requires far more diligence when it comes to error handling and fallbacks than traditional programming because, unlike with traditional software development, <a href="https://www.aaron-gustafson.com/notebook/a-fundamental-disconnect/">we don’t control the execution environment</a>.</p>

<p><a href="http://www.crockford.com/">Douglas Crockford</a> (in)famously declared the Web “the most hostile software engineering environment imaginable” and he wasn’t wrong. A lot of things have to go right for our code to reach our users precisely the way we intend. Here are just a few of these requirements:</p>

<ol>
  <li>Our code must be bug-free;</li>
  <li>Included 3rd party code must be bug free and must not interfere with our code;</li>
  <li>Intermediaries—ISPs, routers, etc.—must not inject code or if they do, it must be bug free and not interfere with our code;</li>
  <li>Browser plugins must not interfere with our code;</li>
  <li>The browser must support every language feature and API we want to use; and</li>
  <li>The device must have enough RAM and a fast enough processor to run our code.</li>
</ol>

<p>Some of these can be addressed by programming defensively using test-driven development, <a href="http://www.slideshare.net/simonguest/automated-web-testing-using-javascript">automated QA testing</a>, <a href="https://developer.mozilla.org/docs/Using_Web_Standards_in_your_Web_Pages/Developing_cross-browser_and_cross-platform_pages#Using_Object.2FFeature_support_detection_approach:_best_and_overall_most_reliable">feature detection</a>, and markup detection. These aren’t guaranteed to catch everything—markup can change after a test has run but before the rest of the code executed, <a href="http://javascriptissexy.com/javascript-objects-in-detail/">JavaScript objects are mutable</a> meaning features can accidentally disappear, etc.—but they are incredibly helpful for creating robust JavaScript programs. You can also run your projects under HTTPS to avoid intermediaries manipulating your code, though <a href="http://arstechnica.com/security/2015/01/gogo-issues-fake-https-certificate-to-users-visiting-youtube/">that’s not fool-proof either</a>.</p>

<p>The devices themselves, we have no control over. It’s not like we can send a new device to each and every user (or prospective user) we have just to ensure they have the appropriate hardware and software requirements to use our product.<sup id="fnref:2"><a href="#fn:2" class="footnote">2</a></sup> Instead, we need to <a href="https://www.smashingmagazine.com/2012/11/writing-fast-memory-efficient-javascript/">write JavaScript programs that play well in a multitude of of scenarios (including resource-limited ones)</a>.</p>

<p>And, of course, none of this addresses network availability. In many instances, a user’s network connection has the greatest impact on their experience of our products. If the connection is slow (or the page’s resources are exceptionally large) the page load experience can be excruciatingly painful. If the connection goes down and dependencies aren’t met, the experience can feel disjointed or may be flat out broken. Using <a href="https://developer.mozilla.org/docs/Web/API/Service_Worker_API">Service Worker</a> and client-side storage (<a href="https://developer.mozilla.org/docs/Web/API/IndexedDB_API"><code>indexedDB</code></a> and <a href="https://developer.mozilla.org/docs/Web/API/Web_Storage_API">Web Storage</a>) can definitely help mitigate these issues for repeat visits, but they don’t do much to help with initial load. They also don’t work at all if your JavaScript program doesn’t run. Which brings me to my last point.</p>

<p>When you love a language like JavaScript (as I do), it can be difficult to recognize (or even admit) it’s shortcomings, but recognizing them is part of becoming a better programmer. The Web is constantly evolving and our understanding of the languages we use to build it expands as fast as—or often faster than—their capabilities do. As such, we need to remain open to new and different ways of doing things. Change can be scary, but it can also be good. Being asked to consider a non-JavaScript experience shouldn’t be seen as an affront to JavaScript, but rather a challenge to create more robust experiences. After all, our last line of defense in providing a good user experience is providing one with <a href="https://www.smashingmagazine.com/2016/05/developing-dependency-awareness/">the least number of dependencies</a>. That’s what progressive enhancements asks us to do.</p>

<h2 id="javascript--pe-kissing-in-a-tree">JavaScript &amp; PE kissing in a tree?</h2>

<p>All of this is to say I don’t think JavaScript and progressive enhancement are diametrically opposed and I don’t think folks who love the JavaScript language or tout the progressive enhancement philosophy should be either. Together they have the potential to making the Web the best it can possibly be.</p>

<p>Progressive enhancement’s focus on providing a baseline experience that makes no assumptions about browser features will provide a robust foundation for any project. It also guides us to be smarter about <em>how</em> we apply technologies like HTML, CSS, JavaScript and ARIA by asking us to consider what happens when those dependencies aren’t met.</p>

<p>JavaScript absolutely makes the user experience better for anyone who can benefit from it. It can make interfaces more accessible. It can help mitigate networking issues. It can create smoother, more seamless experiences for our users. And it can reduce the friction inherent in accomplishing most tasks on the Web. JavaScript is an indispensable part of the modern Web.</p>

<p>In order to come together, however, folks <a href="https://www.baldurbjarnason.com/notes/debating-web-development/">need to stop demonizing and dismissing one another</a>. Instead we need to rally together to make the Web better. But before we can do that, we need to start with a common understanding of the nature of JavaScript. The progressive enhancement camp needs to concede that all JavaScript is not evil, or even bad—JavaScript can be a force for good and it’s got really solid support. The JavaScript camp needs to concede that, despite its ubiquity and near universal support, we can never be absolutely guaranteed our JavaScript programs will run.</p>

<p>I fully believe we can heal this rift, but it’s probably gonna take some time. I fully intend to do my part and I hope you will as well.</p>

<p><ins datetime="2016-10-18T11:11:00-04:00"><strong>Update:</strong> This post was updated to clarify that graceful degradation can take many forms and to explicitly tie progressive enhancement and graceful degradation together.</ins></p>

<div class="footnotes">
  <ol>
    <li id="fn:1">
      <p>Full disclosure: We both work at Microsoft, but on different teams. <a href="#fnref:1" class="reversefootnote">&#8617;</a></p>
    </li>
    <li id="fn:2">
      <p>It’s worth noting that <a href="http://gizmodo.com/website-opts-to-buy-customers-new-computers-rather-than-1513186669">one company, NursingJobs, actually did this</a>. <a href="#fnref:2" class="reversefootnote">&#8617;</a></p>
    </li>
  </ol>
</div>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Post: I’m Voting for Oscar]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/im-voting-for-oscar/"/>
				<updated>2016-10-11T08:06:49-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/im-voting-for-oscar</id>
				<content type="html"><![CDATA[<figure id="fig-2016-10-11-1" class="media-container"><img src="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-11/oscar.jpg&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" srcset="https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-11/oscar.jpg&amp;resize_w=1920&amp;container=focus&amp;refresh=2592000 1920w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-11/oscar.jpg&amp;resize_w=600&amp;container=focus&amp;refresh=2592000 600w,https://images1-focus-opensocial.googleusercontent.com/gadgets/proxy?url=https://www.aaron-gustafson.com/i/posts/2016-10-11/oscar.jpg&amp;resize_w=320&amp;container=focus&amp;refresh=2592000 320w" sizes="100vw" alt="" /></figure>

<p><a href="#fig-2016-10-11-1">This is my son Oscar</a>. In case you can’t see the picture, he looks nothing like me because he’s adopted. He’s also friggin’ adorable, but that’s not why I’m writing this. I’m writing this because my son is black and despite the fact that he will grow up in a family that has the means to provide him with a good education and far more opportunity than a lot of children in America—including me—the sheer fact that his skin is dark means he will grow up in a far different America than I did.</p>

<!-- more -->

<p><a href="http://www.ibtimes.com/shopping-while-black-americas-retailers-know-they-have-racial-profiling-problem-now-2222778">He will be suspected when he enters a store</a>. <a href="http://blogs.edweek.org/teachers/teaching_now/2016/03/bias.html">He will be treated differently in school</a>. <a href="http://www.nytimes.com/2016/08/11/us/heres-how-racial-bias-plays-out-in-policing.html">He will be policed differently</a>. If he commits a crime, he will be <a href="http://www.prisonpolicy.org/graphs/raceinc.html">six times more likely to be incarcerated</a> than his white friends in daycare; and if it’s a drug offense, he’ll be <a href="http://www.drugwarfacts.org/cms/Race_and_Prison">ten times more likely to serve time</a>.</p>

<p>He will be feared by default. He will be suspected by default. He will be guilty by default. All because he’s black.</p>

<p>I don’t want him to grow up in an America where <a href="https://en.wikipedia.org/wiki/Shooting_of_Philando_Castile">he could have his life ended during a traffic stop for a broken tail light</a>. I listened to Diamond Reynolds’ recording of Philando Castile dying and I had to stop the car and cry; I couldn’t bear to watch the video. He was someone else’s son. Someone else’s little boy.</p>

<p>This is not the America I want Oscar to grow up in and we have an opportunity to change it. I fully recognize that <a href="http://www.eisenhowerfoundation.org/docs/kerner.pdf">the societal issues that underly the way we (as a nation) treat the black community</a> and other people of color in the U.S. are not new, nor are they going to go away overnight. It’s going to take time and commitment to making it happen.</p>

<p>What I also know, however, is that electing a president who proposes <a href="http://www.lgbtqnation.com/2016/08/trumps-immigration-policies-follow-historical-racist-precedents/">racist policies</a>, uses <a href="http://www.azcentral.com/story/news/politics/onpolitics/2016/06/21/racist-comments-federal-judge-hurt-donald-trump-florida-ohio/86172262/">racist rhetoric</a>, and <a href="http://www.cbsnews.com/news/trump-paints-apocalyptic-picture-of-racial-tensions-in-u-s/">gins up racial tensions</a> among his supporters is not going to make America a safer place for Oscar to grow up. A man who <a href="http://www.sacbee.com/opinion/editorials/article99304487.html">routinely derides and demonizes immigrant populations</a> of varying shades (despite marrying numerous immigrants himself) is not going to lead us to be a more inclusive nation. And a man who has <a href="http://www.nytimes.com/2016/07/24/opinion/sunday/is-donald-trump-a-racist.html">a history of treating the black community unfairly</a> is not going to be the champion we need to help unify our different racial and ethnic communities into that melting pot of ideas and cultures we’ve been taught is America’s greatest strength.</p>

<p>When I go to the polls this Fall to help my country choose its next leader, I will be thinking of my son and all of the other children in this great nation of ours. I will think about the future America they stand to inherit and I will vote against Donald Trump. I hope you will join me in taking a stand against fear, against further segregation of our society, and against racism. America is already great, and it will be much better without Trump.</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Progressive Enhancement Delivers Best Customer Experience]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/progressive-enhancement-best-customer-experience-across-browsers/"/>
				<updated>2016-08-19T13:31:47-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/progressive-enhancement-best-customer-experience-across-browsers</id>
				<content type="html"><![CDATA[<p>Yep.</p>

<blockquote>
  <p>Progressive enhancement focuses on the entire customer experience by continually looking forward to embrace improvements vs looking backward to degrade them.</p>
</blockquote>
<p><a rel="full-article" href="https://www.mobify.com/insights/progressive-enhancement-best-customer-experience-across-browsers/">Read on Mobify&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Weird Browsers]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/weird-browsers-at-webworker-nrw/"/>
				<updated>2016-08-19T13:26:43-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/weird-browsers-at-webworker-nrw</id>
				<content type="html"><![CDATA[<p>I love, love, love this talk from <a href="https://twitter.com/rakaz">Niels Leenheer</a> at <a href="https://frontendne.co.uk">Frontend NE</a>. He covers TV browsers, game consoles, handheld consoles, e-readers, and VR headsets and talks about what we can, can’t, and should try to do to accommodate them.</p>

<p>You can also <a href="https://www.youtube.com/watch?v=ojGIva5801I">watch Niels give this talk on YouTube</a>.</p>
<p><a rel="full-article" href="https://speakerdeck.com/nielsleenheer/weird-browsers-at-webworker-nrw">Read on Niels Leenheer on Speaker Deck&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Post: What Would You Do With 10kB?]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/what-would-you-do-with-10kb/"/>
				<updated>2016-08-17T14:48:27-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/what-would-you-do-with-10kb</id>
				<content type="html"><![CDATA[<p>Sixteen years ago, <a href="https://twitter.com/stewart">Stewart Butterfield</a> conceived of a contest that would test the mettle of any web designer: <a href="http://web.archive.org/web/20000510010054/http:/www.sylloge.com/5k/home.html">The 5k</a>. The idea was that entrants would build <a href="http://alistapart.com/article/5k">an entire site in 5kB of code or less</a>. Its aim was to force us to get creative by putting a bounding box on what we could do:</p>

<blockquote>
  <p>Between servers and bandwidth, clients and users, HTML and the DOM, browsers and platforms, our conscience and our ego, we’re left in a very small space to find highly optimal solutions. Since the space we have to explore is so small, we have to look harder, get more creative; and that’s what makes it all interesting.</p>
</blockquote>

<!-- more -->

<p>The 5k contest ran from 2000 until 2002. In 2010, <a href="http://www.zeldman.com/2010/07/29/10k-apart-%E2%80%93%C2%A0inspire-the-web/">An Event Apart and Microsoft revived the idea</a> with an updated limit and a new name: <a href="http://web.archive.org/web/20100730090946/http:/10k.aneventapart.com/">10k Apart</a>. Staying true to its roots, this new incarnation, which ran for two years, continued to push designers and developers to get creative within a pretty extreme (though slightly expanded) limit while incorporating new goodies like HTML5 and responsive design.</p>

<p>I’m thrilled to announce that <a href="https://a-k-apart.com/">the 10k Apart contest is back</a> and brings with it a handful of new challenges:</p>

<ol>
  <li><strong>Each page must be usable in 10kB or less.</strong> The 10kB limit no longer applies to the size of a ZIP archive of your entry; the 10kB limit now applies to the total initial download size of the baseline experience of each page in your project. When we say “baseline experience,” we’re talking small screen devices running older, less capable browsers. The 10kB limit will apply to every page and whatever assets it loads by default; that means images, CSS, JavaScript, and so on.</li>
  <li><strong>Progressive enhancement is the name of the game.</strong> Your project should start with a super-basic, bare-bones-but-usable experience that will work no matter what (including without JavaScript). You can use clever CSS and JavaScript techniques to enhance that experience as it makes sense to do so. For example: You might lazy load an image using JavaScript if the screen size is above a certain threshold or when certain other conditions are met. Entries that depend entirely on JavaScript to render the front-end won’t be accepted. If you need a primer on progressive enhancement, <a href="http://alistapart.com/search?keywords=progressive%20enhancement">consult the pages of <cite>A List Apart</cite></a>.</li>
  <li><strong>Back ends are in this year.</strong> In previous iterations, each entry comprised client-side code submitted via ZIP file. Over time, that limitation led to an over-reliance on JavaScript for rendering. No more. This year, you can create dynamic experiences that work without front-end JavaScript using Node, PHP, Python or .Net. You will submit your entry as public GitHub repository (so we can all learn from your awesome code) and we’ll spin up a dedicated <a href="https://azure.microsoft.com/">Azure</a> instance running the appropriate stack.</li>
  <li><strong>Entries should be accessible.</strong> In line with the philosophy of progressive enhancement, your entry should be usable by the broadest number of users possible. <a href="http://www.accessiq.org/news/commentary/2012/09/web-accessibility-is-a-mindset-not-a-checklist">Accessibility is not a checklist</a>, but if you’re clueless about where to start, <a href="https://www.w3.org/TR/WCAG20-TECHS/">these techniques</a> can offer some guidance.</li>
  <li><strong>Nothing comes for free.</strong> In previous years, we gave a pass if you wanted to use jQuery or load some fonts from Typekit. This year we decided to change it up, not because we don’t love these products (we do), but because we wanted to force every piece of code, every asset, to fight for its place in your entry. Anything you add should be added with purpose.</li>
</ol>

<p>As with previous editions, your entry should use web standards and work in all modern browsers. You can use HTML, CSS, and JavaScript features and APIs that don’t have across-the-board support as long as you do so in keeping with the progressive enhancement philosophy. In other words, your entry can’t depend on that technology or feature in order to be usable.</p>

<p>All of this may sound like a tall order, but it’s entirely possible. In fact, the site we built for the contest also abides by these rules. My colleagues and I will touch on some of the techniques we used (and concessions we made) in building the site in future posts.</p>

<p>If you’ve read this far, you might be wondering <em>What’s in it for me?</em> Well, bragging rights, of course, but we’ve got some awesome prizes too! We’re giving away $10,000 to the top three entries, plus <a href="http://aneventapart.com/events">tickets to An Event Apart</a>, complete collections of <a href="https://abookapart.com/collections/standards-collection">A Book Apart titles</a>, and copies of <a href="http://adaptivewebdesign.info/2nd-edition/">my book</a> too. <a href="https://a-k-apart.com/#prizes">Complete details of the prizes</a> are over on <a href="https://a-k-apart.com/">the contest site</a>.</p>

<p>We’ve lined up an amazing group to judge the entires this year too: <a href="https://twitter.com/rachelandrew">Rachel Andrew</a>, <a href="https://twitter.com/lara_hogan">Lara Hogan</a>, <a href="https://twitter.com/wilto">Mat Marquis</a>, <a href="https://twitter.com/Heydonworks">Heydon Pickering</a>, <a href="https://twitter.com/jensimmons">Jen Simmons</a>, and <a href="https://twitter.com/SaraSoueidan">Sara Soueidan</a> will all be putting your entry through its paces and peering under the hood at your code. There’s also a People’s Choice award which will be based on votes you cast. Voting will open October 1st and run through October 14th.</p>

<p>The contest opened Monday and we will accept entries until 5pm Pacific Time on September 30th. <a href="https://a-k-apart.com/legal">Everything you should need to know about the contest, eligibility, etc.</a> is up on <a href="https://a-k-apart.com/">the 10k Apart site</a>, but if you have additional questions, <a href="https://a-k-apart.com/hi">you can always reach out</a>.</p>

<p>I can’t wait to see what you come up with! Happy coding!</p>
]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Test on the Right Mobile Devices]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/test-on-the-right-mobile-devices/"/>
				<updated>2016-08-16T14:38:08-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/test-on-the-right-mobile-devices</id>
				<content type="html"><![CDATA[<p>This is a nice overview of where you should be spending your mobile device testing time if you’re clueless about where to begin. Obviously it skews toward BrowserStack’s offerings, but it’s a pretty solid list of devices. It doesn’t touch on browsers though, which means Opera is a glaring omission.</p>
<p><a rel="full-article" href="https://www.browserstack.com/test-on-the-right-mobile-devices">Read on BrowserStack&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Another 10k Apart: Create a Website in 10 KB, Win Prizes!]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/another-10k-apart/"/>
				<updated>2016-08-15T13:05:50-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/another-10k-apart</id>
				<content type="html"><![CDATA[<p>Here’s <a href="http://www.zeldman.com/">Jeffrey</a>’s introduction to the <a href="https://a-k-apart.com/">2016 10k Apart contest</a>. Did you know it’s <a href="http://aneventapart.com/">An Event Apart</a>’s 10 year anniversary? How cool is that?!</p>
<p><a rel="full-article" href="http://alistapart.com/article/another-10k-apart">Read on A List Apart&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: What Would You Do With 10kB?]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/10k-apart/"/>
				<updated>2016-08-15T13:04:17-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/10k-apart</id>
				<content type="html"><![CDATA[<p>Here’s a little bit of an introduction to <a href="https://a-k-apart.com/">the 2016 10k Apart contest</a> from yours truly.</p>
<p><a rel="full-article" href="https://blogs.windows.com/msedgedev/2016/08/15/10k-apart/">Read on Microsoft Edge Developer Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: 10K Apart]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/a-k-apart/"/>
				<updated>2016-08-15T12:49:25-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/a-k-apart</id>
				<content type="html"><![CDATA[<p>I’m so excited about this new contest!</p>

<blockquote>
  <p>The Challenge? Build a compelling web experience that can be delivered in 10kB and works without JavaScript.</p>
</blockquote>

<p>If you can, <a href="https://a-k-apart.com/#prizes">there’s big money waiting for you</a>!</p>

<p>PS - I’ll be writing up the build process for the site in the coming weeks.</p>
<p><a rel="full-article" href="https://a-k-apart.com/">Read on Microsoft & An Event Apart&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Full Width Containers in Limited Width Parents]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/full-width-containers-limited-width-parents/"/>
				<updated>2016-08-05T13:39:36-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/full-width-containers-limited-width-parents</id>
				<content type="html"><![CDATA[<p>I love this overview of handy column-busting CSS options.</p>
<p><a rel="full-article" href="https://css-tricks.com/full-width-containers-limited-width-parents/">Read on CSS-Tricks&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Stuff I Wish I’d Known Sooner About Service Workers]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/fd6c3c73e6e707e312d7c5d7d0f3b2f9/"/>
				<updated>2016-08-05T13:38:32-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/fd6c3c73e6e707e312d7c5d7d0f3b2f9</id>
				<content type="html"><![CDATA[<p>I’m learning more and more about Service Workers every day…</p>
<p><a rel="full-article" href="https://gist.github.com/Rich-Harris/fd6c3c73e6e707e312d7c5d7d0f3b2f9">Read on Rich Harris&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
		
			<entry>
				<title type="html"><![CDATA[Link: Introducing EdgeHTML 14 With the Windows 10 Anniversary Update]]></title>
				<link href="https://www.aaron-gustafson.com/notebook/links/introducing-edgehtml-14/"/>
				<updated>2016-08-05T13:31:02-04:00</updated>
				<id>https://www.aaron-gustafson.com/notebook/links/introducing-edgehtml-14</id>
				<content type="html"><![CDATA[<p>Edge 14 is out. I’m so proud of my colleagues working on this browser. My favorite bit? The focus on accessibility (and the 100% score on <a href="http://html5accessibility.com/">HTML5Accessibility’s browser benchmark</a> to back it up).</p>
<p><a rel="full-article" href="https://blogs.windows.com/msedgedev/2016/08/04/introducing-edgehtml-14/">Read on Microsoft Edge Developer Blog&nbsp;&rarr;</a></p>]]></content>
			</entry>
		
	
</feed>
